{"version":3,"file":"index.modern.mjs","sources":["../src/base.ts","../src/functions/utils/index.ts","../src/functions/index.ts","../src/index.ts","../src/utils.ts"],"sourcesContent":["import {ethers ,Wallet , Signer} from 'ethers';\n\ntype config = {\n    rpcUrl: string,\n    funcClientAddress: string,\n    funcRegAddress: string,\n    payMasterAddress: string,\n}\n\nexport abstract class Base {\n    private rpcUrl: string;\n    private funcClientAddress: string;\n    private funcRegAddress: string;\n    private payMasterAddress: string;\n\n    constructor(config: config) {\n        this.rpcUrl = config.rpcUrl;\n        this.funcClientAddress = config.funcClientAddress || '';\n        this.funcRegAddress = config.funcRegAddress || '';\n        this.payMasterAddress = config.payMasterAddress || '';\n    }\n\n    protected async provider(): Promise<any> {\n        return new ethers.providers.JsonRpcProvider(this.rpcUrl);\n    }\n\n    protected async getFuncClientAddress(): Promise<string> {\n        return this.funcClientAddress;\n    }\n\n    protected async getFuncRegAddress(): Promise<string> {\n        return this.funcRegAddress;\n    }\n\n    protected async getPayMasterAddress(): Promise<string> {\n        return this.payMasterAddress;\n    }\n\n    protected async getFeeData(): Promise<any> {\n        try{\n            let provider = await this.provider();\n            let feeData = await provider.getFeeData();\n            let fee = {\n                maxFeePerGas: feeData.maxFeePerGas,\n                maxPriorityFeePerGas: feeData.maxPriorityFeePerGas,\n                gasLimit: 5e6,\n            }\n\n            return fee;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n}","import funcClientAbi from './funcClient.json';\nimport funcRegAbi from './funcReg.json';\nimport payMaster from './payMaster.json';\nimport erc20Abi from './erc20Abi.json';\n\nconst utils = {\n    funcClientAbi: funcClientAbi, funcRegAbi: funcRegAbi, payMaster: payMaster, erc20Abi: erc20Abi\n}\n\nexport default utils;\n","import { Base } from \"../base\"\nimport { Signer, ethers } from \"ethers\";\nimport utils from \"./utils/index\"\n\ntype functions = {\n    admin: string;\n    caller: string;\n    topupToken: string;\n    functionId: number;\n    status: any;   \n}\n\ntype functionsRequest = {\n    requestId: string;\n    functionId: number;\n    args: Array<string>;\n    returnData: string;\n    err: string;\n    status: boolean;\n}\n\ntype token = {\n    tokenAddress: string;\n    ticker: string;\n}\n\nexport class Functions extends Base {\n    \n    public async registerFunction(signer: Signer, approvedCaller: string, topupToken: string): Promise<number> {\n        try {\n            const funcRegAddress = await this.getFuncRegAddress();\n            const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, signer);\n            const feeData = await this.getFeeData();\n            const registerTx = await funcRegContract.registerFunction(signer.getAddress(), approvedCaller, topupToken, feeData);\n            const registerTxReceipt = await registerTx.wait();\n            if(registerTxReceipt.status == 0){\n                throw new Error(\"Function registration failed\");\n            }\n            // read the function id from the event logs\n            const registerEvent = registerTxReceipt.events?.filter((event: any) => event.event == \"NewFunctionRegistered\")[0];\n            return (registerEvent.args.id).toNumber();\n\n        } catch (e) {\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getRegFunction(id: number): Promise<functions> {\n       try{ const provider = await this.provider();\n        const funcRegAddress = await this.getFuncRegAddress();\n        const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, provider);\n        return await funcRegContract.getRegisteredFunction(id);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getAdminFunctions(admin: string): Promise<Array<functions>> {\n        try{\n            const provider = await this.provider();\n            const funcRegAddress = await this.getFuncRegAddress();\n            const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, provider);\n            return await funcRegContract.getAdminFunctions(admin);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async toogleFunctionState(signer: Signer, id: number): Promise<string> {\n        try{\n            let status: string;\n            const funcRegAddress = await this.getFuncRegAddress();\n            const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, signer);\n            const feeData = await this.getFeeData();\n            const toogleTx = await funcRegContract.toogleFunctionState(id, feeData);\n            const toogleTxReceipt = await toogleTx.wait();\n            if(toogleTxReceipt.status == 0){\n                throw new Error(\"Function status toogle failed\");\n            }\n            const toogleEvent = toogleTxReceipt.events?.filter((event: any) => event.event == \"FunctionStateChange\")[0];\n            console.log(toogleEvent.args.status);\n            if(toogleEvent.args.status == 0){\n                status = \"active\";\n            }else if(toogleEvent.args.status == 1){\n                status = \"paused\";\n            }\n            return status; \n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async topup(signer: Signer, amount: number, topupToken: string): Promise<Boolean> {\n        try{\n            const feeData = await this.getFeeData();\n            const payMasterAddress = await this.getPayMasterAddress();\n            if (topupToken === \"ETH\"){\n                let balance = ethers.utils.formatEther(await signer.getBalance());\n                if (parseInt(balance) < amount){\n                    throw new Error(\"Insufficient ETH balance\");\n                }else{\n                    //transfer eth to paymaster\n                    const payMasterAddress = await this.getPayMasterAddress();\n                    const tx = {\n                        to: payMasterAddress,\n                        value: ethers.utils.parseEther(amount.toString()),\n                        from: signer.getAddress(),\n                        maxFeePerGas: feeData.maxFeePerGas,\n                        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas,\n                        gasLimit: feeData.gasLimit,\n                    }\n                    const txResponse = await signer.sendTransaction(tx);\n                    const txReceipt = await txResponse.wait();\n                    if(txReceipt.status == 0){\n                        throw new Error(\"Topup failed\");\n                    };\n                    return true;\n                }\n            }\n            const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, signer);\n            const topupTx = await payMaster.topup(signer.getAddress(), topupToken, amount, feeData);\n            const topupTxReceipt = await topupTx.wait();\n            if(topupTxReceipt.status == 0){\n                throw new Error(\"Topup failed\");\n            }\n            const topUpEvent = topupTxReceipt.events?.filter((event: any) => event.event == \"TopUp\")[0];\n            console.log(topUpEvent.args.success);\n            return topUpEvent.args.success;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async adminWithdraw(signer: Signer, token: string): Promise<Boolean> {\n        try{\n            const feeData = await this.getFeeData();\n            const payMasterAddress = await this.getPayMasterAddress();\n            const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, signer);\n            const withdrawTx = await payMaster.adminWithdraw(token, feeData);\n            const withdrawTxReceipt = await withdrawTx.wait();\n            if(withdrawTxReceipt.status == 0){\n                throw new Error(\"Withdraw failed\");\n            }\n            const withdrawEvent = withdrawTxReceipt.events?.filter((event: any) => event.event == \"AdminWithdrawn\")[0];\n            console.log(withdrawEvent.args.success);\n            return withdrawEvent.args.success;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getAdminBalance(admin: string, token: string): Promise<number> {\n        try{\n            const provider = await this.provider();\n            const payMasterAddress = await this.getPayMasterAddress();\n            const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, provider);\n            if (token === \"ETH\"){\n                return parseInt(ethers.utils.formatEther(await payMaster.getAdminBalance(admin, token)));\n            }else{\n                return parseInt(ethers.utils.formatUnits(await payMaster.getAdminBalance(admin, token), 10));\n            }  \n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async makeRequest(signer: Signer, funcId: number, args: Array<string>, source: string, secrets: string): Promise<Object> {\n        try{\n            const feeData = await this.getFeeData();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, signer);\n            const requestTx = await funcClient.makeRequest(funcId, source, args, secrets, feeData);\n            const requestTxReceipt = await requestTx.wait();\n            if(requestTxReceipt.status == 0){\n                throw new Error(\"Request failed\");\n            }\n            const requestEvent = requestTxReceipt.events?.filter((event: any) => event.event == \"FuncRequest\")[0];\n            console.log(requestEvent.args.success);\n            return {functionId: requestEvent.args.functionId, requestId: requestEvent.args.requestId}\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async stopFunction(signer: Signer, funcId: number): Promise<any> {\n        try{\n            const feeData = await this.getFeeData();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, signer);\n            const stopTx = await funcClient.stopFunction(funcId, feeData);\n            const stopTxReceipt = await stopTx.wait();\n            if(stopTxReceipt.status == 0){\n                throw new Error(\"Function stop failed\");\n            }\n            const stopEvent = stopTxReceipt.events?.filter((event: any) => event.event == \"FunctionStopped\")[0];\n            console.log(stopEvent.args.success);\n            return stopEvent.args.success;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getLatestRequest(requestId: number): Promise<functionsRequest> {\n        try{\n            const provider = await this.provider();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, provider);\n            return await funcClient.getLatestRequest(requestId);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getAllRequest(requestId: number): Promise<Array<functionsRequest>> {\n        try{\n            const provider = await this.provider();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, provider);\n            return await funcClient.getRequests(requestId);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public approveSpend(signer: Signer, amount: number, token: string): Promise<Boolean> {\n        return new Promise(async (resolve, reject) => {\n            try{\n                const feeData = await this.getFeeData();\n                const payMasterAddress = await this.getPayMasterAddress();\n                const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, signer);\n                const getTopupToken: token = await payMaster.getTopUpToken(token);\n                const tokenContract = new ethers.Contract(getTopupToken.tokenAddress, utils.erc20Abi, signer);\n                //format balance form wei to 10 decimals\n                const balance = ethers.utils.formatUnits(await tokenContract.balanceOf(signer.getAddress()), 10);\n                if (parseInt(balance) < amount){\n                    throw new Error(\"Insufficient balance\");\n                }\n                const approveTx = await tokenContract.approve(payMasterAddress, amount, feeData);\n                const approveTxReceipt = await approveTx.wait();\n                if(approveTxReceipt.status == 0){\n                    throw new Error(\"Approve spend failed\");\n                }\n                return true;\n            }catch(e){\n                console.log(e.message);\n                reject(e.message);\n            }\n        })\n    }\n}\n","import {Base} from './base';\nimport {Functions} from \"./functions\";\nimport { applyMixins } from './utils';\n\nclass FunctionsKit extends Functions{}\ninterface FunctionsKit{}\n\napplyMixins(FunctionsKit, [Functions]);\n\nexport default FunctionsKit;","export function applyMixins(derivedCtor: any , constructors: any[]){\n    constructors.forEach((baseCtor) => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n            Object.defineProperty(\n                derivedCtor.prototype, \n                name, \n                Object.getOwnPropertyDescriptor(baseCtor.prototype, name) || Object.create(null)\n            );\n            \n        });\n    });\n}"],"names":["Base","constructor","config","rpcUrl","this","funcClientAddress","funcRegAddress","payMasterAddress","async","ethers","providers","JsonRpcProvider","provider","feeData","getFeeData","maxFeePerGas","maxPriorityFeePerGas","gasLimit","e","console","log","message","Error","utils","Functions","signer","approvedCaller","topupToken","_registerTxReceipt$ev","getFuncRegAddress","funcRegContract","Contract","registerTx","registerFunction","getAddress","registerTxReceipt","wait","status","events","filter","event","args","id","toNumber","getRegisteredFunction","admin","getAdminFunctions","_toogleTxReceipt$even","toogleTx","toogleFunctionState","toogleTxReceipt","toogleEvent","amount","_topupTxReceipt$event","getPayMasterAddress","balance","formatEther","getBalance","parseInt","tx","to","value","parseEther","toString","from","txResponse","sendTransaction","payMaster","topupTx","topup","topupTxReceipt","topUpEvent","success","token","_withdrawTxReceipt$ev","withdrawTx","adminWithdraw","withdrawTxReceipt","withdrawEvent","getAdminBalance","formatUnits","funcId","source","secrets","_requestTxReceipt$eve","getFuncClientAddress","funcClient","requestTx","makeRequest","requestTxReceipt","requestEvent","functionId","requestId","_stopTxReceipt$events","stopTx","stopFunction","stopTxReceipt","stopEvent","getLatestRequest","getRequests","approveSpend","_this","Promise","resolve","reject","getTopupToken","getTopUpToken","tokenContract","tokenAddress","balanceOf","approveTx","approve","FunctionsKit","derivedCtor","forEach","baseCtor","Object","getOwnPropertyNames","prototype","name","defineProperty","getOwnPropertyDescriptor","create"],"mappings":"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"}