{"version":3,"file":"index.m.js","sources":["../src/base.ts","../src/functions/utils/index.ts","../src/functions/index.ts","../src/index.ts","../src/utils.ts"],"sourcesContent":["import {ethers ,Wallet , Signer} from 'ethers';\n\ntype config = {\n    rpcUrl: string,\n    funcClientAddress: string,\n    funcRegAddress: string,\n    payMasterAddress: string,\n}\n\nexport abstract class Base {\n    private rpcUrl: string;\n    private funcClientAddress: string;\n    private funcRegAddress: string;\n    private payMasterAddress: string;\n\n    constructor(config: config) {\n        this.rpcUrl = config.rpcUrl;\n        this.funcClientAddress = config.funcClientAddress || '';\n        this.funcRegAddress = config.funcRegAddress || '';\n        this.payMasterAddress = config.payMasterAddress || '';\n    }\n\n    protected async provider(): Promise<any> {\n        return new ethers.providers.JsonRpcProvider(this.rpcUrl);\n    }\n\n    protected async getFuncClientAddress(): Promise<string> {\n        return this.funcClientAddress;\n    }\n\n    protected async getFuncRegAddress(): Promise<string> {\n        return this.funcRegAddress;\n    }\n\n    protected async getPayMasterAddress(): Promise<string> {\n        return this.payMasterAddress;\n    }\n\n    protected async getFeeData(): Promise<any> {\n        try{\n            let provider = await this.provider();\n            let feeData = await provider.getFeeData();\n            let fee = {\n                maxFeePerGas: feeData.maxFeePerGas,\n                maxPriorityFeePerGas: feeData.maxPriorityFeePerGas,\n                gasLimit: 5e6,\n            }\n\n            return fee;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n}","import funcClientAbi from './funcClient.json';\nimport funcRegAbi from './funcReg.json';\nimport payMaster from './payMaster.json';\nimport erc20Abi from './erc20Abi.json';\n\nconst utils = {\n    funcClientAbi: funcClientAbi, funcRegAbi: funcRegAbi, payMaster: payMaster, erc20Abi: erc20Abi\n}\n\nexport default utils;\n","import { Base } from \"../base\"\nimport { Signer, ethers } from \"ethers\";\nimport utils from \"./utils/index\"\n\ntype functions = {\n    admin: string;\n    caller: string;\n    topupToken: string;\n    functionId: number;\n    status: any;   \n}\n\ntype functionsRequest = {\n    requestId: string;\n    functionId: number;\n    args: Array<string>;\n    returnData: string;\n    err: string;\n    status: boolean;\n}\n\ntype token = {\n    tokenAddress: string;\n    ticker: string;\n}\n\nexport class Functions extends Base {\n    \n    public async registerFunction(signer: Signer, approvedCaller: string, topupToken: string): Promise<number> {\n        try {\n            const funcRegAddress = await this.getFuncRegAddress();\n            const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, signer);\n            const feeData = await this.getFeeData();\n            const registerTx = await funcRegContract.registerFunction(signer.getAddress(), approvedCaller, topupToken, feeData);\n            const registerTxReceipt = await registerTx.wait();\n            if(registerTxReceipt.status == 0){\n                throw new Error(\"Function registration failed\");\n            }\n            // read the function id from the event logs\n            const registerEvent = registerTxReceipt.events?.filter((event: any) => event.event == \"NewFunctionRegistered\")[0];\n            return (registerEvent.args.id).toNumber();\n\n        } catch (e) {\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getRegFunction(id: number): Promise<functions> {\n       try{ const provider = await this.provider();\n        const funcRegAddress = await this.getFuncRegAddress();\n        const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, provider);\n        return await funcRegContract.getRegisteredFunction(id);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getAdminFunctions(admin: string): Promise<Array<functions>> {\n        try{\n            const provider = await this.provider();\n            const funcRegAddress = await this.getFuncRegAddress();\n            const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, provider);\n            return await funcRegContract.getAdminFunctions(admin);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async toogleFunctionState(signer: Signer, id: number): Promise<string> {\n        try{\n            let status: string;\n            const funcRegAddress = await this.getFuncRegAddress();\n            const funcRegContract = new ethers.Contract(funcRegAddress, utils.funcRegAbi, signer);\n            const feeData = await this.getFeeData();\n            const toogleTx = await funcRegContract.toogleFunctionState(id, feeData);\n            const toogleTxReceipt = await toogleTx.wait();\n            if(toogleTxReceipt.status == 0){\n                throw new Error(\"Function status toogle failed\");\n            }\n            const toogleEvent = toogleTxReceipt.events?.filter((event: any) => event.event == \"FunctionStateChange\")[0];\n            console.log(toogleEvent.args.status);\n            if(toogleEvent.args.status == 0){\n                status = \"active\";\n            }else if(toogleEvent.args.status == 1){\n                status = \"paused\";\n            }\n            return status; \n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async topup(signer: Signer, amount: number, topupToken: string): Promise<Boolean> {\n        try{\n            const feeData = await this.getFeeData();\n            const payMasterAddress = await this.getPayMasterAddress();\n            if (topupToken === \"ETH\"){\n                let balance = ethers.utils.formatEther(await signer.getBalance());\n                if (parseInt(balance) < amount){\n                    throw new Error(\"Insufficient ETH balance\");\n                }else{\n                    //transfer eth to paymaster\n                    const payMasterAddress = await this.getPayMasterAddress();\n                    const tx = {\n                        to: payMasterAddress,\n                        value: ethers.utils.parseEther(amount.toString()),\n                        from: signer.getAddress(),\n                        maxFeePerGas: feeData.maxFeePerGas,\n                        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas,\n                        gasLimit: feeData.gasLimit,\n                    }\n                    const txResponse = await signer.sendTransaction(tx);\n                    const txReceipt = await txResponse.wait();\n                    if(txReceipt.status == 0){\n                        throw new Error(\"Topup failed\");\n                    };\n                    return true;\n                }\n            }\n            const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, signer);\n            const topupTx = await payMaster.topup(signer.getAddress(), topupToken, amount, feeData);\n            const topupTxReceipt = await topupTx.wait();\n            if(topupTxReceipt.status == 0){\n                throw new Error(\"Topup failed\");\n            }\n            const topUpEvent = topupTxReceipt.events?.filter((event: any) => event.event == \"TopUp\")[0];\n            console.log(topUpEvent.args.success);\n            return topUpEvent.args.success;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async adminWithdraw(signer: Signer, token: string): Promise<Boolean> {\n        try{\n            const feeData = await this.getFeeData();\n            const payMasterAddress = await this.getPayMasterAddress();\n            const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, signer);\n            const withdrawTx = await payMaster.adminWithdraw(token, feeData);\n            const withdrawTxReceipt = await withdrawTx.wait();\n            if(withdrawTxReceipt.status == 0){\n                throw new Error(\"Withdraw failed\");\n            }\n            const withdrawEvent = withdrawTxReceipt.events?.filter((event: any) => event.event == \"AdminWithdrawn\")[0];\n            console.log(withdrawEvent.args.success);\n            return withdrawEvent.args.success;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getAdminBalance(admin: string, token: string): Promise<number> {\n        try{\n            const provider = await this.provider();\n            const payMasterAddress = await this.getPayMasterAddress();\n            const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, provider);\n            if (token === \"ETH\"){\n                return parseInt(ethers.utils.formatEther(await payMaster.getAdminBalance(admin, token)));\n            }else{\n                return parseInt(ethers.utils.formatUnits(await payMaster.getAdminBalance(admin, token), 10));\n            }  \n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async makeRequest(signer: Signer, funcId: number, args: Array<string>, source: string, secrets: string): Promise<Object> {\n        try{\n            const feeData = await this.getFeeData();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, signer);\n            const requestTx = await funcClient.makeRequest(funcId, source, args, secrets, feeData);\n            const requestTxReceipt = await requestTx.wait();\n            if(requestTxReceipt.status == 0){\n                throw new Error(\"Request failed\");\n            }\n            const requestEvent = requestTxReceipt.events?.filter((event: any) => event.event == \"FuncRequest\")[0];\n            console.log(requestEvent.args.success);\n            return {functionId: requestEvent.args.functionId, requestId: requestEvent.args.requestId}\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async stopFunction(signer: Signer, funcId: number): Promise<any> {\n        try{\n            const feeData = await this.getFeeData();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, signer);\n            const stopTx = await funcClient.stopFunction(funcId, feeData);\n            const stopTxReceipt = await stopTx.wait();\n            if(stopTxReceipt.status == 0){\n                throw new Error(\"Function stop failed\");\n            }\n            const stopEvent = stopTxReceipt.events?.filter((event: any) => event.event == \"FunctionStopped\")[0];\n            console.log(stopEvent.args.success);\n            return stopEvent.args.success;\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getLatestRequest(requestId: number): Promise<functionsRequest> {\n        try{\n            const provider = await this.provider();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, provider);\n            return await funcClient.getLatestRequest(requestId);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public async getAllRequest(requestId: number): Promise<Array<functionsRequest>> {\n        try{\n            const provider = await this.provider();\n            const funcClientAddress = await this.getFuncClientAddress();\n            const funcClient = new ethers.Contract(funcClientAddress, utils.funcClientAbi, provider);\n            return await funcClient.getRequests(requestId);\n        }catch(e){\n            console.log(e.message);\n            throw new Error(e.message);\n        }\n    }\n\n    public approveSpend(signer: Signer, amount: number, token: string): Promise<Boolean> {\n        return new Promise(async (resolve, reject) => {\n            try{\n                const feeData = await this.getFeeData();\n                const payMasterAddress = await this.getPayMasterAddress();\n                const payMaster = new ethers.Contract(payMasterAddress, utils.payMaster, signer);\n                const getTopupToken: token = await payMaster.getTopUpToken(token);\n                const tokenContract = new ethers.Contract(getTopupToken.tokenAddress, utils.erc20Abi, signer);\n                //format balance form wei to 10 decimals\n                const balance = ethers.utils.formatUnits(await tokenContract.balanceOf(signer.getAddress()), 10);\n                if (parseInt(balance) < amount){\n                    throw new Error(\"Insufficient balance\");\n                }\n                const approveTx = await tokenContract.approve(payMasterAddress, amount, feeData);\n                const approveTxReceipt = await approveTx.wait();\n                if(approveTxReceipt.status == 0){\n                    throw new Error(\"Approve spend failed\");\n                }\n                return true;\n            }catch(e){\n                console.log(e.message);\n                reject(e.message);\n            }\n        })\n    }\n}\n","import {Base} from './base';\nimport {Functions} from \"./functions\";\nimport { applyMixins } from './utils';\n\nclass FunctionsKit extends Functions{}\ninterface FunctionsKit{}\n\napplyMixins(FunctionsKit, [Functions]);\n\nexport default FunctionsKit;","export function applyMixins(derivedCtor: any , constructors: any[]){\n    constructors.forEach((baseCtor) => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n            Object.defineProperty(\n                derivedCtor.prototype, \n                name, \n                Object.getOwnPropertyDescriptor(baseCtor.prototype, name) || Object.create(null)\n            );\n            \n        });\n    });\n}"],"names":["Base","constructor","config","this","rpcUrl","funcClientAddress","funcRegAddress","payMasterAddress","provider","Promise","resolve","ethers","providers","JsonRpcProvider","e","reject","getFuncClientAddress","getFuncRegAddress","getPayMasterAddress","getFeeData","_this5","then","feeData","maxFeePerGas","maxPriorityFeePerGas","gasLimit","_catch","console","log","message","Error","utils","Functions","registerFunction","signer","approvedCaller","topupToken","_this","funcRegContract","Contract","getAddress","registerTx","wait","registerTxReceipt","status","registerEvent","events","filter","event","args","id","toNumber","getRegFunction","_this2","getRegisteredFunction","getAdminFunctions","admin","_this3","toogleFunctionState","_this4","toogleTx","toogleTxReceipt","toogleEvent","topup","amount","_exit","_temp2","_result","payMaster","topupTx","topupTxReceipt","topUpEvent","success","_temp","_ethers$utils","_formatEther","formatEther","getBalance","_signer$getBalance","balance","call","parseInt","tx","to","value","parseEther","toString","from","sendTransaction","txResponse","txReceipt","adminWithdraw","token","_this6","withdrawTx","withdrawTxReceipt","withdrawEvent","getAdminBalance","_this7","_ethers$utils2","_formatEther2","_payMaster$getAdminBa","_ethers$utils3","_formatUnits","formatUnits","_payMaster$getAdminBa2","makeRequest","funcId","source","secrets","_this8","funcClient","requestTx","requestTxReceipt","requestEvent","functionId","requestId","stopFunction","_this9","stopTx","stopTxReceipt","stopEvent","getLatestRequest","_this10","getAllRequest","_this11","getRequests","approveSpend","_this12","getTopUpToken","getTopupToken","tokenContract","tokenAddress","_ethers$utils4","_formatUnits2","balanceOf","_tokenContract$balanc","approve","approveTx","approveTxReceipt","FunctionsKit","derivedCtor","forEach","baseCtor","Object","getOwnPropertyNames","prototype","name","defineProperty","getOwnPropertyDescriptor","create"],"mappings":"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"}